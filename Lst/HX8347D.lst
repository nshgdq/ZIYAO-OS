C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HX8347D
OBJECT MODULE PLACED IN .\Object\HX8347D.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE user\LCD\HX8347D.c LARGE BROWSE INCDIR(.\user\LCD;.\user\W25Qxx;.\user;.\us
                    -er\TOUCH;.\user\flash;.\user\ds1302;.\user\timer;.\user\GUI;.\user\ds18b20;.\user\uart;.\user\ATCmd) DEBUG OBJECTEXTEND 
                    -PRINT(.\Lst\HX8347D.lst) OBJECT(.\Object\HX8347D.obj)

line level    source

   1          /* Includes ------------------------------------------------------------------*/
   2          #include "HX8347D.h" 
   3          #include "font.h"
   4          #include "w25qxx.h"
   5          
   6          
   7          /* Private variables ---------------------------------------------------------*/
   8          //static uint8_t LCD_Code;
   9          u16 LCD_id;
  10          
  11          
  12          //Ð´¼Ä´æÆ÷º¯Êý
  13          void LCD_WR_REG(u8 dat)
  14          { 
  15   1              LCD_RS=0;//Ð´µØÖ·  
  16   1              LCD_CS=0; 
  17   1              DATA_Port = dat; 
  18   1              LCD_WR=0; 
  19   1              LCD_WR=1; 
  20   1              LCD_CS=1;   
  21   1      } 
  22          
  23          void LCD_WR_DATA(u16 dat)
  24          {
  25   1              LCD_RS=1;
  26   1              LCD_CS=0;
  27   1              DATA_Port = dat;
  28   1              LCD_WR=0;
  29   1              LCD_WR=1;
  30   1              LCD_CS=1;
  31   1      } 
  32          
  33          /*******************************************************************************
  34          * Function Name  : LCD_WriteReg
  35          * Description    : Writes to the selected LCD register.
  36          * Input          : - LCD_Reg: address of the selected register.
  37          *                  - LCD_RegValue: value to write to the selected register.
  38          * Output         : None
  39          * Return         : None
  40          * Attention              : None
  41          *******************************************************************************/
  42          static  void LCD_WriteReg(uint8_t LCD_Reg,uint16_t LCD_RegValue)
  43          {
  44   1              LCD_WR_REG(LCD_Reg);  
  45   1              LCD_WR_DATA(LCD_RegValue);      
  46   1      }
  47          
  48          
  49          /*******************************************************************************
  50          * Function Name  : LCD_WriteRAM_Prepare
  51          * Description    : Prepare to write to the LCD RAM.
  52          * Input          : None
  53          * Output         : None
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 2   

  54          * Return         : None
  55          * Attention              : None
  56          *******************************************************************************/
  57          static  void LCD_WriteRAM_Prepare(void)
  58          {
  59   1        LCD_WR_REG(R34);
  60   1      }
  61          
  62          /*******************************************************************************
  63          * Function Name  : LCD_WriteRAM
  64          * Description    : Writes to the LCD RAM.
  65          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
  66          * Output         : None
  67          * Return         : None
  68          * Attention              : None
  69          *******************************************************************************/
  70          static  void LCD_WriteRAM(uint16_t RGB_Code)                                     
  71          {
  72   1        /* Write 16-bit GRAM Reg */
  73   1        LCD_WR_DATA(RGB_Code);
  74   1      }
  75          
  76          
  77          /*******************************************************************************
  78          * Function Name  : LCD_SetCursor
  79          * Description    : Sets the cursor position.
  80          * Input          : - Xpos: specifies the X position.
  81          *                  - Ypos: specifies the Y position. 
  82          * Output         : None
  83          * Return         : None
  84          * Attention              : None
  85          *******************************************************************************/
  86          static  void LCD_SetCursor( uint16_t Xpos, uint16_t Ypos )
  87          {
  88   1          #if  ( DISP_ORIENTATION == 90 ) || ( DISP_ORIENTATION == 270 )
                      
                      uint16_t temp = Xpos;
              
                                       Xpos = Ypos;
                                       Ypos = ( MAX_X - 1 ) - temp;  
              
                      #elif  ( DISP_ORIENTATION == 0 ) || ( DISP_ORIENTATION == 180 )
  96   1              
  97   1              #endif
  98   1      
  99   1              LCD_WriteReg(0x02, Xpos>>8 );                                                  
 100   1              LCD_WriteReg(0x03, Xpos );  
 101   1              LCD_WriteReg(0x06, Ypos>>8 );                           
 102   1              LCD_WriteReg(0x07, Ypos );     
 103   1      }
 104          
 105          /*******************************************************************************
 106          * Function Name  : LCD_Delay
 107          * Description    : Delay Time
 108          * Input          : - nCount: Delay Time
 109          * Output         : None
 110          * Return         : None
 111          * Return         : None
 112          * Attention              : None
 113          *******************************************************************************/
 114          static void delay_ms(uint16_t ms)    
 115          { 
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 3   

 116   1              uint16_t i,j; 
 117   1              for( i = 0; i < ms; i++ )
 118   1              { 
 119   2                      for( j = 0; j < 1141; j++ );
 120   2              }
 121   1      } 
 122          
 123          /*******************************************************************************
 124          * Function Name  : LCD_Initializtion
 125          * Description    : Initialize TFT Controller.
 126          * Input          : None
 127          * Output         : None
 128          * Return         : None
 129          * Attention              : None
 130          *******************************************************************************/
 131          void LCD_Initializtion(void)
 132          {
 133   1              uint16_t DeviceCode = 0x9325;
 134   1              
 135   1              
 136   1              delay_ms(50); // delay 50 ms 
 137   1              LCD_WriteReg(0x0000,0x0001);
 138   1              delay_ms(50); // delay 50 ms 
 139   1              
 140   1      
 141   1              DeviceCode = 0x0047;
 142   1              delay_ms(100);
 143   1      
 144   1              if( DeviceCode == 0x0047 )
 145   1              {
 146   2      
 147   2      
 148   2                      /* Start Initial Sequence */
 149   2                      LCD_WriteReg(0xEA,0x00);                          
 150   2                      LCD_WriteReg(0xEB,0x20);                                                     
 151   2                      LCD_WriteReg(0xEC,0x0C);                                                   
 152   2                      LCD_WriteReg(0xED,0xC4);                                                    
 153   2                      LCD_WriteReg(0xE8,0x40); 
 154   2                      //LCD_WriteReg(0xE8,0x38);              
 155   2                      LCD_WriteReg(0xE9,0x38);                                                    
 156   2                      LCD_WriteReg(0xF1,0x01);                                                    
 157   2                      LCD_WriteReg(0xF2,0x10);                                                    
 158   2                      LCD_WriteReg(0x27,0xA3);                                                    
 159   2                      /* GAMMA SETTING */
 160   2                      LCD_WriteReg(0x40,0x00);                           
 161   2                      LCD_WriteReg(0x41,0x00);                                                   
 162   2                      LCD_WriteReg(0x42,0x01);                                                   
 163   2                      LCD_WriteReg(0x43,0x12);                                                    
 164   2                      LCD_WriteReg(0x44,0x10);                                                   
 165   2                      LCD_WriteReg(0x45,0x26);                                                  
 166   2                      LCD_WriteReg(0x46,0x08);                                                  
 167   2                      LCD_WriteReg(0x47,0x53);                                                   
 168   2                      LCD_WriteReg(0x48,0x02);                                                    
 169   2                      LCD_WriteReg(0x49,0x15);                                                  
 170   2                      LCD_WriteReg(0x4A,0x19);                                                  
 171   2                      LCD_WriteReg(0x4B,0x19);                                                 
 172   2                      LCD_WriteReg(0x4C,0x16); 
 173   2                      
 174   2                      LCD_WriteReg(0x50,0x19);                                                   
 175   2                      LCD_WriteReg(0x51,0x2F);                                                    
 176   2                      LCD_WriteReg(0x52,0x2D);                                                     
 177   2                      LCD_WriteReg(0x53,0x3E);                                                    
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 4   

 178   2                      LCD_WriteReg(0x54,0x3F);                                                     
 179   2                      LCD_WriteReg(0x55,0x3F);                                                     
 180   2                      LCD_WriteReg(0x56,0x2C);                                                   
 181   2                      LCD_WriteReg(0x57,0x77);                                                     
 182   2                      LCD_WriteReg(0x58,0x09);                                                  
 183   2                      LCD_WriteReg(0x59,0x06);                                                 
 184   2                      LCD_WriteReg(0x5A,0x06);                                                   
 185   2                      LCD_WriteReg(0x5B,0x0A);                                                   
 186   2                      LCD_WriteReg(0x5C,0x1D);                                                   
 187   2                      LCD_WriteReg(0x5D,0xCC);   
 188   2                      
 189   2                      /* Power Voltage Setting */
 190   2                      LCD_WriteReg(0x1B,0x1B);                                                    
 191   2                      LCD_WriteReg(0x1A,0x01);  
 192   2                      LCD_WriteReg(0x24,0x2F);                                                    
 193   2                      LCD_WriteReg(0x25,0x57);                                                    
 194   2                      LCD_WriteReg(0x23,0x97);
 195   2                      
 196   2                                                        
 197   2                      LCD_WriteReg(0x18,0x36);                           
 198   2                      LCD_WriteReg(0x19,0x01);                                                                                
             -                  
 199   2                      LCD_WriteReg(0x1F,0x88);                                                    
 200   2                      delay_ms(5);
 201   2                      LCD_WriteReg(0x1F,0x80);                                                  
 202   2                      delay_ms(5);
 203   2                      LCD_WriteReg(0x1F,0x90);                                                   
 204   2                      delay_ms(5);
 205   2                      LCD_WriteReg(0x1F,0xD0);                                                   
 206   2                      delay_ms(5);
 207   2                      
 208   2                      LCD_WriteReg(0x17,0x05);
 209   2                      
 210   2                      LCD_WriteReg(0x36,0x00);                                                    
 211   2                      LCD_WriteReg(0x28,0x38);                                                 
 212   2                      delay_ms(40);
 213   2                      LCD_WriteReg(0x28,0x3C);   
 214   2      
 215   2      
 216   2      //------------------ Set GRAM area ---------------//
 217   2      
 218   2                      LCD_WriteReg(0x02,0x00);                                                  
 219   2                      LCD_WriteReg(0x03,0x00);                           
 220   2                      LCD_WriteReg(0x04,0x00);                           
 221   2                      LCD_WriteReg(0x05,0xEF);                           
 222   2                      LCD_WriteReg(0x06,0x00);                           
 223   2                      LCD_WriteReg(0x07,0x00);                           
 224   2                      LCD_WriteReg(0x08,0x01);                           
 225   2                      LCD_WriteReg(0x09,0x3F); 
 226   2      
 227   2                       
 228   2                      LCD_WriteReg(0x0019,0x0001);
 229   2                      //LCD_WriteReg(0x22,0x22);
 230   2              }
 231   1                                              
 232   1          delay_ms(50);   /* delay 50 ms */
 233   1              //LCD_Clear(White);
 234   1      //      delay_ms(50);   /* delay 50 ms */
 235   1      }
 236          
 237          /*******************************************************************************
 238          * Function Name  : LCD_Clear
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 5   

 239          * Description    : ½«ÆÁÄ»Ìî³ä³ÉÖ¸¶¨µÄÑÕÉ«£¬ÈçÇåÆÁ£¬ÔòÌî³ä 0xffff
 240          * Input          : - Color: Screen Color
 241          * Output         : None
 242          * Return         : None
 243          * Attention              : None
 244          *******************************************************************************/
 245          void LCD_Clear(uint16_t Color)
 246          {
 247   1              uint32_t index=0,i;
 248   1              LCD_SetCursor(0,0);
 249   1              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 250   1      
 251   1              for( index = 0; index < 320; index++ )
 252   1              {
 253   2                      for(i = 0;i < 240; i++)
 254   2                      {
 255   3                      LCD_WR_DATA(Color >> 8);
 256   3                      LCD_WR_DATA(Color); 
 257   3                      }
 258   2              }
 259   1      }
 260          
 261          /******************************************************************************
 262          * Function Name  : LCD_BGR2RGB
 263          * Description    : RRRRRGGGGGGBBBBB ¸ÄÎª BBBBBGGGGGGRRRRR ¸ñÊ½
 264          * Input          : - color: BRG ÑÕÉ«Öµ  
 265          * Output         : None
 266          * Return         : RGB ÑÕÉ«Öµ
 267          * Attention              : ÄÚ²¿º¯Êýµ÷ÓÃ
 268          *******************************************************************************/
 269          /*
 270          static __attribute__((always_inline)) uint16_t LCD_BGR2RGB(uint16_t color)
 271          {
 272                  uint16_t  r, g, b, rgb;
 273                  
 274                  b = ( color>>0 )  & 0x1f;
 275                  g = ( color>>5 )  & 0x3f;
 276                  r = ( color>>11 ) & 0x1f;
 277                  
 278                  rgb =  (b<<11) + (g<<5) + (r<<0);
 279                  
 280                  return( rgb );
 281          }
 282          */
 283          
 284          /******************************************************************************
 285          * Function Name  : LCD_SetPoint
 286          * Description    : ÔÚÖ¸¶¨×ù±ê»­µã
 287          * Input          : - Xpos: Row Coordinate
 288          *                  - Ypos: Line Coordinate 
 289          * Output         : None
 290          * Return         : None
 291          * Attention              : None
 292          *******************************************************************************/
 293          void LCD_SetPoint(uint16_t Xpos,uint16_t Ypos,uint16_t point)
 294          {
 295   1              if( Xpos >= MAX_X || Ypos >= MAX_Y )
 296   1              {
 297   2                      return;
 298   2              }
 299   1              LCD_SetCursor(Xpos,Ypos);
 300   1          LCD_WriteRAM_Prepare();
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 6   

 301   1          LCD_WriteRAM(point>>8);
 302   1              LCD_WriteRAM(point);
 303   1      }
 304          
 305          /******************************************************************************
 306          * Function Name  : LCD_DrawLine
 307          * Description    : Bresenham's line algorithm
 308          * Input          : - x1: AµãÐÐ×ù±ê
 309          *                  - y1: AµãÁÐ×ù±ê 
 310          *                                  - x2: BµãÐÐ×ù±ê
 311          *                                  - y2: BµãÁÐ×ù±ê 
 312          *                                  - color: ÏßÑÕÉ«
 313          * Output         : None
 314          * Return         : None
 315          * Attention              : None
 316          *******************************************************************************/         
 317          void LCD_DrawLine( uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1 , uint16_t color )
 318          {
 319   1          short dx,dy;      /* ¶¨ÒåX YÖáÉÏÔö¼ÓµÄ±äÁ¿Öµ */
 320   1          short temp;       /* Æðµã ÖÕµã´óÐ¡±È½Ï ½»»»Êý¾ÝÊ±µÄÖÐ¼ä±äÁ¿ */
 321   1      
 322   1          if( x0 > x1 )     /* XÖáÉÏÆðµã´óÓÚÖÕµã ½»»»Êý¾Ý */
 323   1          {
 324   2                  temp = x1;
 325   2                      x1 = x0;
 326   2                      x0 = temp;   
 327   2          }
 328   1          if( y0 > y1 )     /* YÖáÉÏÆðµã´óÓÚÖÕµã ½»»»Êý¾Ý */
 329   1          {
 330   2                      temp = y1;
 331   2                      y1 = y0;
 332   2                      y0 = temp;   
 333   2          }
 334   1        
 335   1              dx = x1-x0;       /* XÖá·½ÏòÉÏµÄÔöÁ¿ */
 336   1              dy = y1-y0;       /* YÖá·½ÏòÉÏµÄÔöÁ¿ */
 337   1      
 338   1          if( dx == 0 )     /* XÖáÉÏÃ»ÓÐÔöÁ¿ »­´¹Ö±Ïß */ 
 339   1          {
 340   2              do
 341   2              { 
 342   3                  LCD_SetPoint(x0, y0, color);   /* ÖðµãÏÔÊ¾ Ãè´¹Ö±Ïß */
 343   3                  y0++;
 344   3              }
 345   2              while( y1 >= y0 ); 
 346   2                      return; 
 347   2          }
 348   1          if( dy == 0 )     /* YÖáÉÏÃ»ÓÐÔöÁ¿ »­Ë®Æ½Ö±Ïß */ 
 349   1          {
 350   2              do
 351   2              {
 352   3                  LCD_SetPoint(x0, y0, color);   /* ÖðµãÏÔÊ¾ ÃèË®Æ½Ïß */
 353   3                  x0++;
 354   3              }
 355   2              while( x1 >= x0 ); 
 356   2                      return;
 357   2          }
 358   1              /* ²¼À¼É­ººÄ·(Bresenham)Ëã·¨»­Ïß */
 359   1          if( dx > dy )                         /* ¿¿½üXÖá */
 360   1          {
 361   2                  temp = 2 * dy - dx;               /* ¼ÆËãÏÂ¸öµãµÄÎ»ÖÃ */         
 362   2              while( x0 != x1 )
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 7   

 363   2              {
 364   3                      LCD_SetPoint(x0,y0,color);    /* »­Æðµã */ 
 365   3                      x0++;                         /* XÖáÉÏ¼Ó1 */
 366   3                      if( temp > 0 )                /* ÅÐ¶ÏÏÂÏÂ¸öµãµÄÎ»ÖÃ */
 367   3                      {
 368   4                          y0++;                     /* ÎªÓÒÉÏÏàÁÚµã£¬¼´£¨x0+1,y0+1£© */ 
 369   4                          temp += 2 * dy - 2 * dx; 
 370   4                          }
 371   3                  else         
 372   3                  {
 373   4                                  temp += 2 * dy;           /* ÅÐ¶ÏÏÂÏÂ¸öµãµÄÎ»ÖÃ */  
 374   4                              }       
 375   3              }
 376   2              LCD_SetPoint(x0,y0,color);
 377   2          }  
 378   1          else
 379   1          {
 380   2                  temp = 2 * dx - dy;                      /* ¿¿½üYÖá */       
 381   2              while( y0 != y1 )
 382   2              {
 383   3                          LCD_SetPoint(x0,y0,color);     
 384   3                  y0++;                 
 385   3                  if( temp > 0 )           
 386   3                  {
 387   4                      x0++;               
 388   4                      temp+=2*dy-2*dx; 
 389   4                  }
 390   3                  else
 391   3                              {
 392   4                      temp += 2 * dy;
 393   4                              }
 394   3              } 
 395   2              LCD_SetPoint(x0,y0,color);
 396   2              }
 397   1      } 
 398          
 399          
 400          /******************************************************************************
 401          * Function Name  : PutChar
 402          * Description    : ½«LcdÆÁÉÏÈÎÒâÎ»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
 403          * Input          : - Xpos: Ë®Æ½×ø±ê 
 404          *                  - Ypos: ´¹Ö±×ø±ê  
 405          *                                  - ASCI: ÏÔÊ¾µÄ×Ö·û
 406          *                                  - charColor: ×Ö·ûÑÕÉ«   
 407          *                                  - bkColor: ±³¾°ÑÕÉ« 
 408          * Output         : None
 409          * Return         : None
 410          * Attention              : None
 411          *******************************************************************************/
 412          void PutChar(u16 x,u16 y,u8 num,u16 p_color,u16 b_color)
 413          {
 414   1      
 415   1              u8 temp,t1,t;
 416   1              u16 y0=y;
 417   1              num -= ' ';
 418   1      
 419   1              
 420   1              for(t=0;t<16;t++)
 421   1              {   
 422   2                      temp=asc2_1608[num][t];;  //µ÷ÓÃ×ÖÌåÊý×é
 423   2                      for(t1=0;t1<8;t1++)
 424   2                      {                           
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 8   

 425   3                              if(temp&0x80)
 426   3                                      LCD_SetPoint(x,y,p_color);//ÔÚÖ¸¶¨Î»ÖÃ´òÖ¸¶¨ÑÕÉ«µÄµã
 427   3                              else 
 428   3                                      if(b_color!=0x1111)LCD_SetPoint(x,y,b_color);//ÔÚÖ¸¶¨Î»ÖÃ´òÖ¸¶¨ÑÕÉ«µÄµã
 429   3                                                                              
 430   3                              temp<<=1;
 431   3                              y++;
 432   3                              if(x >= 240){return;}//³¬ÇøÓòÁË
 433   3                              
 434   3                              if((y-y0)==16)
 435   3                              {
 436   4                                      y=y0;
 437   4                                      x++;
 438   4                                      if(x >= 320){return;}//³¬ÇøÓòÁË
 439   4                                      break;
 440   4                              }
 441   3                      }        
 442   2              }       
 443   1      }
 444          
 445          /******************************************************************************
 446          * Function Name  : GUI_Text
 447          * Description    : ÔÚÖ¸¶¨×ù±êÏÔÊ¾×Ö·û´®
 448          * Input          : - Xpos: ÐÐ×ù±ê
 449          *                  - Ypos: ÁÐ×ù±ê 
 450          *                                  - str: ×Ö·û´®
 451          *                                  - charColor: ×Ö·ûÑÕÉ«   
 452          *                                  - bkColor: ±³¾°ÑÕÉ« 
 453          * Output         : None
 454          * Return         : None
 455          * Attention              : None
 456          *******************************************************************************/
 457          void GUI_Text(uint16_t Xpos, uint16_t Ypos, uint8_t *str,uint16_t Color, uint16_t bkColor)
 458          {
 459   1          uint8_t TempChar;
 460   1          do
 461   1          {
 462   2              TempChar = *str++;  
 463   2              PutChar( Xpos, Ypos, TempChar, Color, bkColor );    
 464   2              if( Xpos < 240 - 8 )
 465   2              {
 466   3                  Xpos += 8;
 467   3              } 
 468   2              else if ( Ypos < 320 - 16 )
 469   2              {
 470   3                  Xpos = 0;
 471   3                  Ypos += 16;
 472   3              }   
 473   2              else
 474   2              {
 475   3                  Xpos = 0;
 476   3                  Ypos = 0;
 477   3              }    
 478   2          }
 479   1          while ( *str != 0 );
 480   1      }
 481          /************************************************
 482          **º¯Êý¹¦ÄÜ£ºÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ö¸¶¨´óÐ¡µÄÍ¼Æ¬
 483          **º¯Êý²ÎÊý£ºx,yÎªÏÔÊ¾µÄÎ»ÖÃ×ø±ê£»widthÎªÍ¼Æ¬µÄ¿í¶È£¬highÎªÍ¼Æ¬µÄ¸ß¶È¡£
 484          **ReadAddrÎªÍ¼Æ¬´æ´¢ÔÚflashÖÐµÄÆðÊ¼Î»ÖÃµØÖ·
 485          *************************************************/
 486          void show_picture(u16 x,u16 y,u16 width,u16 high,u32 ReadAddr)
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 9   

 487          {
 488   1              u8 temp1=0x00,temp2=0x00;
 489   1              uint32_t i,j = 0;
 490   1              LCD_SetCursor(x,y);
 491   1        LCD_WriteRAM_Prepare();
 492   1              W25Qxx_CS=0;                            //Ê¹ÄÜÆ÷¼þ   
 493   1        W25Qxx_Write_Byte(W25X_ReadData);         //·¢ËÍ¶ÁÈ¡ÃüÁî   
 494   1        W25Qxx_Write_Byte((u8)((ReadAddr)>>16));  //·¢ËÍ24bitµØÖ·    
 495   1        W25Qxx_Write_Byte((u8)((ReadAddr)>>8));   
 496   1        W25Qxx_Write_Byte((u8)ReadAddr);
 497   1              for( i = 0; i < high; i++ )
 498   1              {
 499   2                      for(j = 0; j < width; j++)
 500   2                      {
 501   3                              temp2=W25Qxx_Read_Byte();
 502   3                              temp1=W25Qxx_Read_Byte();
 503   3                              LCD_WR_DATA(temp1); //¸ß°ËÎ»
 504   3                              LCD_WR_DATA(temp2); //µÍ°ËÎ»
 505   3                      }
 506   2                      LCD_SetCursor(x,y+i+1);
 507   2                      LCD_WriteRAM_Prepare();
 508   2              }
 509   1              W25Qxx_CS=1;
 510   1      }
 511          /*
 512          **º¯Êý¹¦ÄÜ£¬ÔÚÆÁÄ»ÉÏ»­ÊµÐÄ·½¿ò
 513          **²ÎÊý£ºx y·½¿òµÄ×óÉÏ½Ç
 514          width high·½¿òµÄ¿í¸ß
 515          color ·½¿òµÄÑÕÉ«
 516          */
 517          void LCD_DrawBox(u16 x,u16 y,u16 width,u16 high,uint16_t color)
 518          {
 519   1              uint32_t i,j = 0;
 520   1              LCD_SetCursor(x,y);
 521   1        LCD_WriteRAM_Prepare();
 522   1              for( i = 0; i < high; i++ )
 523   1              {
 524   2                      for(j = 0; j < width; j++)
 525   2                      {
 526   3                              LCD_WR_DATA(color>>8); //¸ß°ËÎ»
 527   3                              LCD_WR_DATA(color); //µÍ°ËÎ»
 528   3                      }
 529   2                      LCD_SetCursor(x,y+i+1);
 530   2                      LCD_WriteRAM_Prepare();
 531   2              }
 532   1              
 533   1      }
 534          /*
 535          **º¯Êý¹¦ÄÜ£¬ÔÚÆÁÄ»ÉÏ»­¿ÕÐÄ·½¿ò
 536          **²ÎÊý£ºx y·½¿òµÄ×óÉÏ½Ç
 537          width high·½¿òµÄ¿í¸ß
 538          color ·½¿òµÄÑÕÉ«
 539          */
 540          void LCD_DrawEBox(u16 x,u16 y,u16 width,u16 high,uint16_t color)
 541          {
 542   1              LCD_DrawLine(x,y,x+width,y,color);
 543   1              LCD_DrawLine(x+1,y+1,x+width-1,y+1,color);
 544   1              LCD_DrawLine(x,y,x,y+high,color);
 545   1              LCD_DrawLine(x+1,y+1,x+1,y+high-1,color);
 546   1              LCD_DrawLine(x,y+high,x+width,y+high,color);
 547   1              LCD_DrawLine(x+1,y+high-1,x+width-1,y+high-1,color);
 548   1              LCD_DrawLine(x+width,y,x+width,y+high,color);
C51 COMPILER V9.00   HX8347D                                                               06/20/2015 12:44:14 PAGE 10  

 549   1              LCD_DrawLine(x+width-1,y+1,x+width-1,y+high-1,color);
 550   1      }
 551          /*********************************************************************************************************
 552                END FILE
 553          *********************************************************************************************************/
 554          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3228    ----
   CONSTANT SIZE    =   1520    ----
   XDATA SIZE       =      2     104
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
